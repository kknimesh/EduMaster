name: Deploy Full EduMaster Application

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1

jobs:
  deploy-full-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Account ID
        id: account
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT

      - name: Build EduMaster Frontend
        run: |
          echo "🔨 Building EduMaster frontend application..."
          
          # Go to frontend directory
          cd frontend
          
          # Install dependencies
          echo "Installing dependencies..."
          npm ci --only=production
          
          # Build the application
          echo "Building React application..."
          npm run build
          
          echo "✅ Frontend built successfully"
          ls -la build/

      - name: Create Production Dockerfile
        run: |
          echo "📝 Creating production Dockerfile..."
          
          cat > frontend/Dockerfile.prod << 'EOF'
          # Multi-stage build for production
          FROM node:18-alpine as build
          
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --only=production
          
          COPY . .
          RUN npm run build
          
          # Production stage with nginx
          FROM nginx:alpine
          
          # Copy built app
          COPY --from=build /app/build /usr/share/nginx/html
          
          # Copy nginx configuration
          COPY nginx.conf /etc/nginx/nginx.conf
          
          # Expose port 80
          EXPOSE 80
          
          # Health check
          HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
            CMD curl -f http://localhost/ || exit 1
          
          CMD ["nginx", "-g", "daemon off;"]
          EOF
          
          echo "✅ Production Dockerfile created"

      - name: Build and Push EduMaster Container
        run: |
          echo "🚀 Building and pushing EduMaster container..."
          
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.account.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          
          # Build production image
          cd frontend
          docker build -f Dockerfile.prod -t edumaster-app .
          
          # Tag and push
          docker tag edumaster-app:latest ${{ steps.account.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/edumaster:production-latest
          docker push ${{ steps.account.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/edumaster:production-latest
          
          echo "✅ EduMaster container built and pushed successfully"

      - name: Stop Current Container
        run: |
          echo "🛑 Stopping current nginx container..."
          
          CLUSTER_NAME=$(aws ecs list-clusters --query 'clusterArns[0]' --output text | xargs basename)
          
          # Get running tasks
          TASK_ARNS=$(aws ecs list-tasks --cluster $CLUSTER_NAME --query 'taskArns' --output text)
          
          # Stop all running tasks
          for TASK_ARN in $TASK_ARNS; do
            if [ -n "$TASK_ARN" ]; then
              echo "Stopping task: $TASK_ARN"
              aws ecs stop-task --cluster $CLUSTER_NAME --task $TASK_ARN
            fi
          done
          
          echo "Waiting for tasks to stop..."
          sleep 30

      - name: Create EduMaster Task Definition
        run: |
          echo "📝 Creating EduMaster task definition..."
          
          # Create log group
          aws logs create-log-group --log-group-name "/ecs/edumaster-app" || echo "Log group exists"
          
          # Register new task definition
          aws ecs register-task-definition \
            --family edumaster-app \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu 512 \
            --memory 1024 \
            --execution-role-arn "arn:aws:iam::${{ steps.account.outputs.account_id }}:role/ecsTaskExecutionRole" \
            --container-definitions "[{
              \"name\": \"edumaster-frontend\",
              \"image\": \"${{ steps.account.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/edumaster:production-latest\",
              \"portMappings\": [{\"containerPort\": 80, \"protocol\": \"tcp\"}],
              \"essential\": true,
              \"environment\": [
                {\"name\": \"NODE_ENV\", \"value\": \"production\"},
                {\"name\": \"REACT_APP_API_URL\", \"value\": \"http://edumaster-alb-a94208ec-635552552.us-east-1.elb.amazonaws.com/api\"}
              ],
              \"healthCheck\": {
                \"command\": [\"CMD-SHELL\", \"curl -f http://localhost/ || exit 1\"],
                \"interval\": 30,
                \"timeout\": 5,
                \"retries\": 3,
                \"startPeriod\": 60
              },
              \"logConfiguration\": {
                \"logDriver\": \"awslogs\",
                \"options\": {
                  \"awslogs-group\": \"/ecs/edumaster-app\",
                  \"awslogs-region\": \"${{ env.AWS_REGION }}\",
                  \"awslogs-stream-prefix\": \"ecs\"
                }
              }
            }]"
          
          echo "✅ EduMaster task definition created"

      - name: Deploy EduMaster Application
        id: deploy
        run: |
          echo "🚀 Deploying EduMaster application..."
          
          CLUSTER_NAME=$(aws ecs list-clusters --query 'clusterArns[0]' --output text | xargs basename)
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text)
          
          # Get public subnet
          SUBNET_ID=$(aws ec2 describe-subnets \
            --filters "Name=vpc-id,Values=$VPC_ID" "Name=map-public-ip-on-launch,Values=true" \
            --query 'Subnets[0].SubnetId' \
            --output text)
          
          # Get existing security group (from previous deployment)
          SG_ID=$(aws ec2 describe-security-groups \
            --filters "Name=vpc-id,Values=$VPC_ID" "Name=group-name,Values=edumaster-working-*" \
            --query 'SecurityGroups[0].GroupId' \
            --output text)
          
          echo "Using infrastructure:"
          echo "Cluster: $CLUSTER_NAME"
          echo "VPC: $VPC_ID"
          echo "Subnet: $SUBNET_ID"
          echo "Security Group: $SG_ID"
          
          # Run EduMaster task
          TASK_ARN=$(aws ecs run-task \
            --cluster $CLUSTER_NAME \
            --task-definition edumaster-app:1 \
            --launch-type FARGATE \
            --platform-version LATEST \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SG_ID],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          
          echo "task_arn=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "EduMaster task started: $TASK_ARN"

      - name: Wait for Application to Start
        run: |
          echo "⏳ Waiting for EduMaster application to start..."
          
          CLUSTER_NAME=$(aws ecs list-clusters --query 'clusterArns[0]' --output text | xargs basename)
          TASK_ARN="${{ steps.deploy.outputs.task_arn }}"
          
          # Wait longer for the larger application
          echo "Waiting 2 minutes for application to build and start..."
          sleep 120
          
          # Check task status
          TASK_STATUS=$(aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $TASK_ARN --query 'tasks[0].lastStatus' --output text)
          echo "Task Status: $TASK_STATUS"
          
          if [ "$TASK_STATUS" = "RUNNING" ]; then
            echo "✅ EduMaster application is RUNNING!"
            
            # Get IPs
            PRIVATE_IP=$(aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`privateIPv4Address`].value' --output text)
            ENI_ID=$(aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
            PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query 'NetworkInterfaces[0].Association.PublicIp' --output text 2>/dev/null || echo "None")
            
            echo "Private IP: $PRIVATE_IP"
            echo "Public IP: $PUBLIC_IP"
            
            # Update Load Balancer target
            echo "🔗 Updating Load Balancer..."
            
            # Get existing target group
            TG_ARN=$(aws elbv2 describe-target-groups --query 'TargetGroups[?starts_with(TargetGroupName, `edumaster`)].TargetGroupArn' --output text | head -1)
            
            if [ -n "$TG_ARN" ]; then
              # Deregister old targets
              OLD_TARGETS=$(aws elbv2 describe-target-health --target-group-arn $TG_ARN --query 'TargetHealthDescriptions[*].Target.Id' --output text)
              for OLD_TARGET in $OLD_TARGETS; do
                if [ -n "$OLD_TARGET" ]; then
                  aws elbv2 deregister-targets --target-group-arn $TG_ARN --targets Id=$OLD_TARGET,Port=80 || echo "Failed to deregister $OLD_TARGET"
                fi
              done
              
              # Register new target
              aws elbv2 register-targets --target-group-arn $TG_ARN --targets Id=$PRIVATE_IP,Port=80
              
              echo "✅ Load Balancer updated with EduMaster application"
            fi
            
          else
            echo "❌ Application failed to start. Status: $TASK_STATUS"
            aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $TASK_ARN --query 'tasks[0].stoppedReason' --output text
          fi

      - name: Final Health Check and Status
        run: |
          echo "⏳ Waiting for health checks and application warmup (2 minutes)..."
          sleep 120
          
          echo "📊 Final deployment status:"
          
          # Check target health
          TG_ARN=$(aws elbv2 describe-target-groups --query 'TargetGroups[?starts_with(TargetGroupName, `edumaster`)].TargetGroupArn' --output text | head -1)
          
          if [ -n "$TG_ARN" ]; then
            echo "Target Health:"
            aws elbv2 describe-target-health --target-group-arn $TG_ARN --output table
          fi
          
          echo ""
          echo "🎉 EDUMASTER DEPLOYMENT COMPLETE!"
          echo ""
          echo "🌐 Your EduMaster application is now live at:"
          echo "http://edumaster-alb-a94208ec-635552552.us-east-1.elb.amazonaws.com"
          echo ""
          echo "🎨 Features available:"
          echo "✅ Complete UI/UX Design System"
          echo "✅ 80+ Interactive Components"
          echo "✅ Form Components, Navigation, Modals"
          echo "✅ Data Tables, Calendar, Video Player"
          echo "✅ Dark Mode Toggle"
          echo "✅ Mobile-Responsive Design"
          echo ""
          echo "🔍 Monitor your application:"
          echo "- ECS Console: https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters"
          echo "- CloudWatch Logs: https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#logsV2:log-groups/log-group/%2Fecs%2Fedumaster-app"
          echo ""
          echo "⏳ Note: If the page shows 503, wait 2-3 more minutes for health checks to complete."