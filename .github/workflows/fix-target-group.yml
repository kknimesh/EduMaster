name: Fix Target Group and Check Status

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1

jobs:
  fix-target-group:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check Current Deployment Status
        run: |
          echo "üîç Checking current deployment status..."
          
          CLUSTER_NAME=$(aws ecs list-clusters --query 'clusterArns[0]' --output text | xargs basename)
          
          echo "=== ECS TASKS ==="
          aws ecs list-tasks --cluster $CLUSTER_NAME --output table
          
          # Get task details
          TASK_ARNS=$(aws ecs list-tasks --cluster $CLUSTER_NAME --query 'taskArns' --output text)
          
          for TASK_ARN in $TASK_ARNS; do
            if [ -n "$TASK_ARN" ]; then
              echo ""
              echo "Task: $TASK_ARN"
              TASK_STATUS=$(aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $TASK_ARN --query 'tasks[0].lastStatus' --output text)
              echo "Status: $TASK_STATUS"
              
              if [ "$TASK_STATUS" = "RUNNING" ]; then
                PRIVATE_IP=$(aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`privateIPv4Address`].value' --output text)
                echo "Private IP: $PRIVATE_IP"
                
                # Get ENI and public IP
                ENI_ID=$(aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
                PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query 'NetworkInterfaces[0].Association.PublicIp' --output text 2>/dev/null || echo "None")
                echo "Public IP: $PUBLIC_IP"
                
                # Test container directly if public IP available
                if [ "$PUBLIC_IP" != "None" ] && [ -n "$PUBLIC_IP" ]; then
                  echo "Testing direct container access..."
                  curl -s -o /dev/null -w "HTTP Status: %{http_code}\n" "http://$PUBLIC_IP" || echo "Direct access failed"
                fi
              fi
            fi
          done

      - name: Check Load Balancer and Target Groups
        run: |
          echo ""
          echo "=== LOAD BALANCER ==="
          LB_ARN=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?starts_with(LoadBalancerName, `edumaster-alb`)].LoadBalancerArn' --output text)
          echo "Load Balancer ARN: $LB_ARN"
          
          echo ""
          echo "=== ALL TARGET GROUPS ==="
          aws elbv2 describe-target-groups --query 'TargetGroups[?starts_with(TargetGroupName, `edumaster`)].{Name:TargetGroupName,ARN:TargetGroupArn,Port:Port,Protocol:Protocol}' --output table
          
          echo ""
          echo "=== TARGET GROUP HEALTH ==="
          
          # Get all target groups and check health individually
          TG_ARNS=$(aws elbv2 describe-target-groups --query 'TargetGroups[?starts_with(TargetGroupName, `edumaster`)].TargetGroupArn' --output text)
          
          for TG_ARN in $TG_ARNS; do
            TG_NAME=$(aws elbv2 describe-target-groups --target-group-arns $TG_ARN --query 'TargetGroups[0].TargetGroupName' --output text)
            echo ""
            echo "Target Group: $TG_NAME"
            echo "ARN: $TG_ARN"
            aws elbv2 describe-target-health --target-group-arn $TG_ARN --output table
          done

      - name: Check Load Balancer Listeners
        run: |
          echo ""
          echo "=== LOAD BALANCER LISTENERS ==="
          LB_ARN=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?starts_with(LoadBalancerName, `edumaster-alb`)].LoadBalancerArn' --output text)
          
          aws elbv2 describe-listeners --load-balancer-arn $LB_ARN --output table
          
          # Show which target group is currently active
          ACTIVE_TG_ARN=$(aws elbv2 describe-listeners --load-balancer-arn $LB_ARN --query 'Listeners[0].DefaultActions[0].TargetGroupArn' --output text)
          ACTIVE_TG_NAME=$(aws elbv2 describe-target-groups --target-group-arns $ACTIVE_TG_ARN --query 'TargetGroups[0].TargetGroupName' --output text)
          
          echo ""
          echo "üéØ Currently Active Target Group: $ACTIVE_TG_NAME"
          echo "ARN: $ACTIVE_TG_ARN"

      - name: Connect Latest Task to Load Balancer
        run: |
          echo ""
          echo "üîó Ensuring Load Balancer points to latest running task..."
          
          CLUSTER_NAME=$(aws ecs list-clusters --query 'clusterArns[0]' --output text | xargs basename)
          
          # Find the most recent running task
          LATEST_TASK_ARN=$(aws ecs list-tasks --cluster $CLUSTER_NAME --desired-status RUNNING --query 'taskArns[0]' --output text)
          
          if [ -n "$LATEST_TASK_ARN" ] && [ "$LATEST_TASK_ARN" != "None" ]; then
            echo "Latest running task: $LATEST_TASK_ARN"
            
            # Get the task's private IP
            TASK_IP=$(aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $LATEST_TASK_ARN --query 'tasks[0].attachments[0].details[?name==`privateIPv4Address`].value' --output text)
            echo "Task IP: $TASK_IP"
            
            # Get the most recent target group (should be the one we want)
            LATEST_TG_ARN=$(aws elbv2 describe-target-groups --query 'TargetGroups[?starts_with(TargetGroupName, `edumaster`)].{ARN:TargetGroupArn,Created:CreationTime}' --output json | jq -r 'sort_by(.Created) | reverse | .[0].ARN')
            
            echo "Latest target group: $LATEST_TG_ARN"
            
            # Register the running task with the latest target group
            aws elbv2 register-targets --target-group-arn $LATEST_TG_ARN --targets Id=$TASK_IP,Port=80
            
            # Update load balancer listener to point to latest target group
            LB_ARN=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?starts_with(LoadBalancerName, `edumaster-alb`)].LoadBalancerArn' --output text)
            
            # Get listener ARN
            LISTENER_ARN=$(aws elbv2 describe-listeners --load-balancer-arn $LB_ARN --query 'Listeners[0].ListenerArn' --output text)
            
            # Update listener to point to latest target group
            aws elbv2 modify-listener --listener-arn $LISTENER_ARN --default-actions Type=forward,TargetGroupArn=$LATEST_TG_ARN
            
            echo "‚úÖ Load Balancer updated to point to latest task"
            
            # Wait and check health
            echo ""
            echo "‚è≥ Waiting 60 seconds for health checks..."
            sleep 60
            
            echo ""
            echo "üìä Final Health Status:"
            aws elbv2 describe-target-health --target-group-arn $LATEST_TG_ARN --output table
            
          else
            echo "‚ùå No running tasks found"
          fi

      - name: Test Application
        run: |
          echo ""
          echo "üß™ Testing application access..."
          
          LB_URL="http://edumaster-alb-a94208ec-635552552.us-east-1.elb.amazonaws.com"
          
          echo "Testing Load Balancer URL: $LB_URL"
          
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$LB_URL" || echo "000")
          
          echo "HTTP Status: $HTTP_STATUS"
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ SUCCESS! Application is responding correctly"
            echo ""
            echo "üéâ Your EduMaster application is now live!"
            echo "üåê URL: $LB_URL"
            echo ""
            echo "Features available:"
            echo "‚úÖ Complete UI/UX Design System"
            echo "‚úÖ 80+ Interactive Components"
            echo "‚úÖ Responsive Design"
            echo "‚úÖ Dark Mode Support"
            
          elif [ "$HTTP_STATUS" = "503" ]; then
            echo "‚ö†Ô∏è  Service temporarily unavailable (503)"
            echo "This usually means health checks are still running"
            echo "Wait 2-3 more minutes and try again"
            
          else
            echo "‚ùå Application not responding correctly"
            echo "HTTP Status: $HTTP_STATUS"
            echo "Check the ECS tasks and CloudWatch logs for issues"
          fi
          
          echo ""
          echo "üìä Deployment Summary:"
          echo "- Load Balancer: Working"
          echo "- Target Groups: Connected"
          echo "- ECS Tasks: $(aws ecs list-tasks --cluster $(aws ecs list-clusters --query 'clusterArns[0]' --output text | xargs basename) --desired-status RUNNING --query 'length(taskArns)' --output text) running"
          echo "- Application Status: HTTP $HTTP_STATUS"