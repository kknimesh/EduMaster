name: Cleanup and Deploy

on:
  workflow_dispatch:
    inputs:
      cleanup_first:
        description: 'Clean up existing resources first'
        required: true
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'

env:
  AWS_REGION: us-east-1

jobs:
  cleanup-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      - name: Cleanup Existing Resources (if requested)
        if: github.event.inputs.cleanup_first == 'true'
        run: |
          echo "🧹 Cleaning up existing resources..."
          
          # Delete Load Balancer if exists
          aws elbv2 describe-load-balancers --names edumaster-alb --region ${{ env.AWS_REGION }} 2>/dev/null && \
          aws elbv2 delete-load-balancer --load-balancer-arn $(aws elbv2 describe-load-balancers --names edumaster-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text --region ${{ env.AWS_REGION }}) --region ${{ env.AWS_REGION }} || echo "Load balancer not found"
          
          # Delete RDS instance if exists
          aws rds describe-db-instances --db-instance-identifier edumaster-db --region ${{ env.AWS_REGION }} 2>/dev/null && \
          aws rds delete-db-instance --db-instance-identifier edumaster-db --skip-final-snapshot --region ${{ env.AWS_REGION }} || echo "RDS instance not found"
          
          # Delete DB Subnet Group if exists
          aws rds describe-db-subnet-groups --db-subnet-group-name edumaster-db-subnet-group --region ${{ env.AWS_REGION }} 2>/dev/null && \
          aws rds delete-db-subnet-group --db-subnet-group-name edumaster-db-subnet-group --region ${{ env.AWS_REGION }} || echo "DB subnet group not found"
          
          # Wait a bit for resources to be deleted
          echo "⏳ Waiting for resources to be deleted..."
          sleep 60

      - name: Terraform Init
        working-directory: ./infrastructure/terraform
        run: terraform init

      - name: Terraform Validate
        working-directory: ./infrastructure/terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./infrastructure/terraform
        run: terraform plan -var="db_username=edumaster_admin" -var="db_password=TempPassword123!" -var="aws_region=${{ env.AWS_REGION }}"

      - name: Terraform Apply
        working-directory: ./infrastructure/terraform
        run: terraform apply -auto-approve -var="db_username=edumaster_admin" -var="db_password=TempPassword123!" -var="aws_region=${{ env.AWS_REGION }}"

      - name: Create ECR Repository
        run: |
          aws ecr describe-repositories --repository-names edumaster --region ${{ env.AWS_REGION }} 2>/dev/null || \
          aws ecr create-repository --repository-name edumaster --region ${{ env.AWS_REGION }}

      - name: Output Infrastructure Info
        run: |
          echo "🎉 Infrastructure created successfully!"
          echo "ECR Repository: $(aws ecr describe-repositories --repository-names edumaster --query 'repositories[0].repositoryUri' --output text --region ${{ env.AWS_REGION }})"
          echo "Load Balancer DNS: $(terraform -chdir=./infrastructure/terraform output -raw alb_dns_name 2>/dev/null || echo 'Not available yet')"