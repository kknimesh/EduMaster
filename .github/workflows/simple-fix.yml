name: Simple Fix - No Health Checks

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1

jobs:
  simple-fix:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Account ID
        id: account
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT

      - name: Quick Cleanup
        run: |
          echo "üßπ Quick cleanup..."
          CLUSTER_NAME=$(aws ecs list-clusters --query 'clusterArns[0]' --output text | xargs basename)
          
          # Set desired count to 0 for all services
          for SERVICE in $(aws ecs list-services --cluster $CLUSTER_NAME --query 'serviceArns' --output text); do
            SERVICE_NAME=$(basename $SERVICE)
            echo "Stopping service: $SERVICE_NAME"
            aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --desired-count 0 2>/dev/null || echo "Failed to stop $SERVICE_NAME"
          done
          
          echo "Waiting 30 seconds for tasks to stop..."
          sleep 30

      - name: Run Simple Container with Public IP
        run: |
          echo "üöÄ Running simple container with public access..."
          
          CLUSTER_NAME=$(aws ecs list-clusters --query 'clusterArns[0]' --output text | xargs basename)
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text)
          
          # Get a public subnet
          SUBNET_ID=$(aws ec2 describe-subnets \
            --filters "Name=vpc-id,Values=$VPC_ID" "Name=map-public-ip-on-launch,Values=true" \
            --query 'Subnets[0].SubnetId' \
            --output text)
          
          # Create security group that allows everything
          SG_ID=$(aws ec2 create-security-group \
            --group-name "edumaster-open-$(date +%s)" \
            --description "Open access for testing" \
            --vpc-id $VPC_ID \
            --query 'GroupId' \
            --output text)
          
          # Allow all HTTP traffic
          aws ec2 authorize-security-group-ingress \
            --group-id $SG_ID \
            --protocol tcp \
            --port 80 \
            --cidr 0.0.0.0/0
          
          # Allow all HTTPS traffic  
          aws ec2 authorize-security-group-ingress \
            --group-id $SG_ID \
            --protocol tcp \
            --port 443 \
            --cidr 0.0.0.0/0
          
          # Allow health checks
          aws ec2 authorize-security-group-ingress \
            --group-id $SG_ID \
            --protocol tcp \
            --port 8080 \
            --cidr 0.0.0.0/0
          
          echo "Created security group: $SG_ID"
          echo "Using subnet: $SUBNET_ID"

      - name: Create Simple Task Definition
        run: |
          # Use a simple, reliable container
          aws ecs register-task-definition \
            --family edumaster-simple-test \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu 256 \
            --memory 512 \
            --execution-role-arn "arn:aws:iam::${{ steps.account.outputs.account_id }}:role/ecsTaskExecutionRole" \
            --container-definitions '[{
              "name": "simple-web",
              "image": "nginx:alpine",
              "portMappings": [{"containerPort": 80, "protocol": "tcp"}],
              "essential": true,
              "environment": [],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/edumaster-test",
                  "awslogs-region": "${{ env.AWS_REGION }}",
                  "awslogs-stream-prefix": "ecs",
                  "awslogs-create-group": "true"
                }
              }
            }]'
          
          echo "‚úÖ Simple task definition created"

      - name: Run Task Directly
        id: run-task
        run: |
          CLUSTER_NAME=$(aws ecs list-clusters --query 'clusterArns[0]' --output text | xargs basename)
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text)
          SUBNET_ID=$(aws ec2 describe-subnets \
            --filters "Name=vpc-id,Values=$VPC_ID" "Name=map-public-ip-on-launch,Values=true" \
            --query 'Subnets[0].SubnetId' \
            --output text)
          SG_ID=$(aws ec2 describe-security-groups \
            --filters "Name=group-name,Values=edumaster-open-*" \
            --query 'SecurityGroups[0].GroupId' \
            --output text)
          
          echo "Running task with:"
          echo "Cluster: $CLUSTER_NAME"
          echo "Subnet: $SUBNET_ID"
          echo "Security Group: $SG_ID"
          
          # Run task directly (no service)
          TASK_ARN=$(aws ecs run-task \
            --cluster $CLUSTER_NAME \
            --task-definition edumaster-simple-test \
            --launch-type FARGATE \
            --platform-version LATEST \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SG_ID],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          
          echo "task_arn=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "Task started: $TASK_ARN"
          
          # Wait for task to be running
          echo "Waiting for task to start..."
          sleep 60

      - name: Get Task Public IP and Create Target Group
        run: |
          CLUSTER_NAME=$(aws ecs list-clusters --query 'clusterArns[0]' --output text | xargs basename)
          TASK_ARN="${{ steps.run-task.outputs.task_arn }}"
          
          # Get task details
          TASK_INFO=$(aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $TASK_ARN)
          echo "Task info: $TASK_INFO"
          
          # Get private IP
          PRIVATE_IP=$(echo "$TASK_INFO" | jq -r '.tasks[0].attachments[0].details[] | select(.name=="privateIPv4Address") | .value')
          
          # Get public IP  
          ENI_ID=$(echo "$TASK_INFO" | jq -r '.tasks[0].attachments[0].details[] | select(.name=="networkInterfaceId") | .value')
          PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
          
          echo "Private IP: $PRIVATE_IP"
          echo "Public IP: $PUBLIC_IP"
          
          if [ "$PUBLIC_IP" != "None" ] && [ -n "$PUBLIC_IP" ]; then
            echo ""
            echo "üéâ SUCCESS! Task is running with public access!"
            echo ""
            echo "üåê Direct container access: http://$PUBLIC_IP"
            echo ""
            echo "Now connecting to Load Balancer..."
            
            # Create target group
            VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text)
            
            TG_ARN=$(aws elbv2 create-target-group \
              --name "edumaster-direct-$(date +%s | tail -c 6)" \
              --protocol HTTP \
              --port 80 \
              --vpc-id $VPC_ID \
              --target-type ip \
              --health-check-enabled \
              --health-check-path "/" \
              --health-check-interval-seconds 30 \
              --health-check-timeout-seconds 5 \
              --healthy-threshold-count 2 \
              --unhealthy-threshold-count 5 \
              --query 'TargetGroups[0].TargetGroupArn' \
              --output text 2>/dev/null || echo "Failed to create target group")
            
            if [ "$TG_ARN" != "Failed to create target group" ] && [ -n "$TG_ARN" ]; then
              # Register private IP with target group
              aws elbv2 register-targets \
                --target-group-arn $TG_ARN \
                --targets Id=$PRIVATE_IP,Port=80
              
              # Update load balancer listener
              LB_ARN=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?starts_with(LoadBalancerName, `edumaster-alb`)].LoadBalancerArn' --output text)
              
              # Delete existing listeners
              for LISTENER_ARN in $(aws elbv2 describe-listeners --load-balancer-arn $LB_ARN --query 'Listeners[*].ListenerArn' --output text 2>/dev/null); do
                aws elbv2 delete-listener --listener-arn $LISTENER_ARN 2>/dev/null || echo "Failed to delete listener"
              done
              
              # Create new listener
              aws elbv2 create-listener \
                --load-balancer-arn $LB_ARN \
                --protocol HTTP \
                --port 80 \
                --default-actions Type=forward,TargetGroupArn=$TG_ARN
              
              echo "‚úÖ Load Balancer connected to container"
              echo ""
              echo "‚è≥ Waiting for health checks (2 minutes)..."
              sleep 120
              
              echo "Final target health:"
              aws elbv2 describe-target-health --target-group-arn $TG_ARN --output table
              
              echo ""
              echo "üåê Load Balancer URL: http://edumaster-alb-a94208ec-635552552.us-east-1.elb.amazonaws.com"
              echo "üåê Direct Container URL: http://$PUBLIC_IP"
              echo ""
              echo "‚úÖ Both URLs should now work!"
            fi
          else
            echo "‚ùå Failed to get public IP"
          fi