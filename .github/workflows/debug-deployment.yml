name: Debug Deployment

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check ECS Service Status
        run: |
          echo "üîç Checking ECS Service Status..."
          CLUSTER_NAME=$(aws ecs list-clusters --query 'clusterArns[0]' --output text | xargs basename)
          
          echo "Cluster: $CLUSTER_NAME"
          echo ""
          
          echo "Services in cluster:"
          aws ecs list-services --cluster $CLUSTER_NAME --output table
          echo ""
          
          echo "Service details:"
          aws ecs describe-services --cluster $CLUSTER_NAME --services edumaster-simple-service --output table 2>/dev/null || echo "Service not found"
          echo ""
          
          echo "Tasks in cluster:"
          aws ecs list-tasks --cluster $CLUSTER_NAME --output table
          echo ""
          
          echo "Task details:"
          TASK_ARNS=$(aws ecs list-tasks --cluster $CLUSTER_NAME --query 'taskArns' --output text)
          if [ -n "$TASK_ARNS" ]; then
            aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $TASK_ARNS --output table
          else
            echo "No tasks running"
          fi

      - name: Check Load Balancer Status
        run: |
          echo "üîç Checking Load Balancer Status..."
          
          echo "Load Balancers:"
          aws elbv2 describe-load-balancers --query 'LoadBalancers[?starts_with(LoadBalancerName, `edumaster-alb`)].{Name:LoadBalancerName,DNS:DNSName,State:State.Code}' --output table
          echo ""
          
          LB_ARN=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?starts_with(LoadBalancerName, `edumaster-alb`)].LoadBalancerArn' --output text)
          
          echo "Listeners:"
          aws elbv2 describe-listeners --load-balancer-arn $LB_ARN --output table
          echo ""
          
          echo "Target Groups:"
          aws elbv2 describe-target-groups --query 'TargetGroups[?starts_with(TargetGroupName, `edumaster`)].{Name:TargetGroupName,Protocol:Protocol,Port:Port,HealthCheck:HealthCheckPath}' --output table
          echo ""
          
          echo "Target Health:"
          TG_ARNS=$(aws elbv2 describe-target-groups --query 'TargetGroups[?starts_with(TargetGroupName, `edumaster`)].TargetGroupArn' --output text)
          for TG_ARN in $TG_ARNS; do
            echo "Target Group: $TG_ARN"
            aws elbv2 describe-target-health --target-group-arn $TG_ARN --output table
            echo ""
          done

      - name: Check Container Logs
        run: |
          echo "üîç Checking Container Logs..."
          
          echo "CloudWatch Log Groups:"
          aws logs describe-log-groups --log-group-name-prefix "/ecs/edumaster" --output table
          echo ""
          
          echo "Recent log events:"
          aws logs describe-log-streams --log-group-name "/ecs/edumaster-simple" --query 'logStreams[0].logStreamName' --output text 2>/dev/null | head -1 | xargs -I {} aws logs get-log-events --log-group-name "/ecs/edumaster-simple" --log-stream-name {} --limit 20 --output table 2>/dev/null || echo "No logs found"

      - name: Fix Target Group Registration
        run: |
          echo "üîß Attempting to fix target registration..."
          
          # Get running task IPs
          CLUSTER_NAME=$(aws ecs list-clusters --query 'clusterArns[0]' --output text | xargs basename)
          TASK_ARNS=$(aws ecs list-tasks --cluster $CLUSTER_NAME --query 'taskArns' --output text)
          
          if [ -n "$TASK_ARNS" ]; then
            for TASK_ARN in $TASK_ARNS; do
              echo "Getting IP for task: $TASK_ARN"
              TASK_IP=$(aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`privateIPv4Address`].value' --output text)
              echo "Task IP: $TASK_IP"
              
              # Register with target group
              TG_ARN=$(aws elbv2 describe-target-groups --query 'TargetGroups[?starts_with(TargetGroupName, `edumaster-simple`)].TargetGroupArn' --output text)
              if [ -n "$TG_ARN" ] && [ -n "$TASK_IP" ]; then
                echo "Registering $TASK_IP with target group"
                aws elbv2 register-targets --target-group-arn $TG_ARN --targets Id=$TASK_IP,Port=80 || echo "Registration failed"
              fi
            done
          else
            echo "No running tasks found"
          fi

      - name: Restart ECS Service
        run: |
          echo "üîÑ Restarting ECS Service..."
          CLUSTER_NAME=$(aws ecs list-clusters --query 'clusterArns[0]' --output text | xargs basename)
          
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service edumaster-simple-service \
            --force-new-deployment \
            --desired-count 1 || echo "Service restart failed"

      - name: Wait and Final Status
        run: |
          echo "‚è≥ Waiting 2 minutes for changes to take effect..."
          sleep 120
          
          echo "üîç Final Status Check:"
          
          # Check target health again
          TG_ARN=$(aws elbv2 describe-target-groups --query 'TargetGroups[?starts_with(TargetGroupName, `edumaster-simple`)].TargetGroupArn' --output text)
          if [ -n "$TG_ARN" ]; then
            echo "Target Health Status:"
            aws elbv2 describe-target-health --target-group-arn $TG_ARN --output table
          fi
          
          echo ""
          echo "üåê Try accessing: http://edumaster-alb-a94208ec-635552552.us-east-1.elb.amazonaws.com"
          echo ""
          echo "If still showing 503:"
          echo "1. Wait another 5 minutes for health checks"
          echo "2. Check security groups allow port 80"
          echo "3. Verify container is running and healthy"