name: Complete Infrastructure Reset

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1

jobs:
  complete-reset:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Complete Diagnostic
        run: |
          echo "🔍 COMPLETE INFRASTRUCTURE DIAGNOSTIC"
          echo "===================================="
          
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS Account: $ACCOUNT_ID"
          
          # Check ECS
          echo ""
          echo "=== ECS CLUSTER STATUS ==="
          CLUSTER_NAME=$(aws ecs list-clusters --query 'clusterArns[0]' --output text | xargs basename)
          echo "Cluster: $CLUSTER_NAME"
          
          echo ""
          echo "Tasks:"
          aws ecs list-tasks --cluster $CLUSTER_NAME --output table
          
          # Get all task details
          TASK_ARNS=$(aws ecs list-tasks --cluster $CLUSTER_NAME --query 'taskArns' --output text)
          for TASK_ARN in $TASK_ARNS; do
            if [ -n "$TASK_ARN" ]; then
              echo ""
              echo "Task: $TASK_ARN"
              TASK_INFO=$(aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $TASK_ARN --output json)
              echo "$TASK_INFO" | jq -r '.tasks[0] | "Status: \(.lastStatus) | Health: \(.healthStatus // "N/A") | Reason: \(.stoppedReason // "Running")"'
              
              # Check container logs
              TASK_DEF_ARN=$(echo "$TASK_INFO" | jq -r '.tasks[0].taskDefinitionArn')
              LOG_GROUP=$(aws ecs describe-task-definition --task-definition $TASK_DEF_ARN --query 'taskDefinition.containerDefinitions[0].logConfiguration.options."awslogs-group"' --output text 2>/dev/null || echo "No logs")
              
              if [ "$LOG_GROUP" != "No logs" ] && [ "$LOG_GROUP" != "None" ]; then
                echo "Log Group: $LOG_GROUP"
                LOG_STREAM=$(aws logs describe-log-streams --log-group-name "$LOG_GROUP" --order-by LastEventTime --descending --max-items 1 --query 'logStreams[0].logStreamName' --output text 2>/dev/null || echo "No streams")
                if [ "$LOG_STREAM" != "No streams" ] && [ "$LOG_STREAM" != "None" ]; then
                  echo "Recent logs:"
                  aws logs get-log-events --log-group-name "$LOG_GROUP" --log-stream-name "$LOG_STREAM" --limit 10 --query 'events[*].message' --output text 2>/dev/null | tail -5 || echo "No logs available"
                fi
              fi
            fi
          done
          
          # Check Load Balancer
          echo ""
          echo "=== LOAD BALANCER STATUS ==="
          LB_ARN=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?starts_with(LoadBalancerName, `edumaster-alb`)].LoadBalancerArn' --output text)
          echo "Load Balancer ARN: $LB_ARN"
          
          LB_STATE=$(aws elbv2 describe-load-balancers --load-balancer-arns $LB_ARN --query 'LoadBalancers[0].State.Code' --output text)
          echo "Load Balancer State: $LB_STATE"
          
          # Check Target Groups
          echo ""
          echo "=== TARGET GROUPS ==="
          TG_ARNS=$(aws elbv2 describe-target-groups --query 'TargetGroups[?starts_with(TargetGroupName, `edumaster`)].TargetGroupArn' --output text)
          echo "Found $(echo $TG_ARNS | wc -w) target groups"
          
          for TG_ARN in $TG_ARNS; do
            TG_NAME=$(aws elbv2 describe-target-groups --target-group-arns $TG_ARN --query 'TargetGroups[0].TargetGroupName' --output text)
            echo ""
            echo "Target Group: $TG_NAME"
            echo "ARN: $TG_ARN"
            
            # Health check configuration
            aws elbv2 describe-target-groups --target-group-arns $TG_ARN --query 'TargetGroups[0].{Path:HealthCheckPath,Interval:HealthCheckIntervalSeconds,Timeout:HealthCheckTimeoutSeconds,Healthy:HealthyThresholdCount,Unhealthy:UnhealthyThresholdCount}' --output table
            
            # Target health
            echo "Target Health:"
            aws elbv2 describe-target-health --target-group-arn $TG_ARN --output table 2>/dev/null || echo "No targets registered"
          done
          
          # Check Listeners
          echo ""
          echo "=== LOAD BALANCER LISTENERS ==="
          aws elbv2 describe-listeners --load-balancer-arn $LB_ARN --output table
          
          # Test Load Balancer directly
          echo ""
          echo "=== LOAD BALANCER TEST ==="
          LB_DNS=$(aws elbv2 describe-load-balancers --load-balancer-arns $LB_ARN --query 'LoadBalancers[0].DNSName' --output text)
          echo "Testing: http://$LB_DNS"
          
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://$LB_DNS" -m 10 || echo "TIMEOUT")
          echo "HTTP Status: $HTTP_STATUS"
          
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "❌ Load Balancer is not returning 200"
            echo "Detailed curl test:"
            curl -v "http://$LB_DNS" -m 10 || echo "Curl failed"
          fi

      - name: Complete Infrastructure Reset
        run: |
          echo ""
          echo "🔄 PERFORMING COMPLETE RESET"
          echo "============================"
          
          CLUSTER_NAME=$(aws ecs list-clusters --query 'clusterArns[0]' --output text | xargs basename)
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          LB_ARN=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?starts_with(LoadBalancerName, `edumaster-alb`)].LoadBalancerArn' --output text)
          
          # Step 1: Stop ALL tasks
          echo "1. Stopping all ECS tasks..."
          TASK_ARNS=$(aws ecs list-tasks --cluster $CLUSTER_NAME --query 'taskArns' --output text)
          for TASK_ARN in $TASK_ARNS; do
            if [ -n "$TASK_ARN" ]; then
              aws ecs stop-task --cluster $CLUSTER_NAME --task $TASK_ARN
            fi
          done
          
          # Step 2: Delete ALL target groups
          echo "2. Deleting all target groups..."
          TG_ARNS=$(aws elbv2 describe-target-groups --query 'TargetGroups[?starts_with(TargetGroupName, `edumaster`)].TargetGroupArn' --output text)
          for TG_ARN in $TG_ARNS; do
            echo "Deleting: $TG_ARN"
            aws elbv2 delete-target-group --target-group-arn $TG_ARN 2>/dev/null || echo "Failed to delete"
          done
          
          # Step 3: Delete ALL listeners
          echo "3. Deleting all listeners..."
          LISTENER_ARNS=$(aws elbv2 describe-listeners --load-balancer-arn $LB_ARN --query 'Listeners[*].ListenerArn' --output text 2>/dev/null)
          for LISTENER_ARN in $LISTENER_ARNS; do
            if [ -n "$LISTENER_ARN" ]; then
              echo "Deleting listener: $LISTENER_ARN"
              aws elbv2 delete-listener --listener-arn $LISTENER_ARN 2>/dev/null || echo "Failed to delete listener"
            fi
          done
          
          # Wait for cleanup
          echo "4. Waiting for cleanup to complete..."
          sleep 60
          
          # Step 5: Test direct container deployment (bypass Load Balancer)
          echo "5. Testing direct container deployment..."
          
          # Get network details
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text)
          SUBNET_ID=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" "Name=map-public-ip-on-launch,Values=true" --query 'Subnets[0].SubnetId' --output text)
          
          # Create fresh security group
          SG_ID=$(aws ec2 create-security-group \
            --group-name "edumaster-reset-$(date +%s)" \
            --description "Fresh security group for reset" \
            --vpc-id $VPC_ID \
            --query 'GroupId' \
            --output text)
          
          aws ec2 authorize-security-group-ingress \
            --group-id $SG_ID \
            --protocol tcp \
            --port 80 \
            --cidr 0.0.0.0/0
          
          # Create minimal task definition
          aws logs create-log-group --log-group-name "/ecs/edumaster-reset" || echo "Log group exists"
          
          aws ecs register-task-definition \
            --family edumaster-reset \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu 256 \
            --memory 512 \
            --execution-role-arn "arn:aws:iam::$ACCOUNT_ID:role/ecsTaskExecutionRole" \
            --container-definitions '[{
              "name": "test-nginx",
              "image": "nginx:alpine",
              "portMappings": [{"containerPort": 80, "protocol": "tcp"}],
              "essential": true,
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/edumaster-reset",
                  "awslogs-region": "${{ env.AWS_REGION }}",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }]'
          
          # Run the task
          TASK_ARN=$(aws ecs run-task \
            --cluster $CLUSTER_NAME \
            --task-definition edumaster-reset:1 \
            --launch-type FARGATE \
            --platform-version LATEST \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SG_ID],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          
          echo "Reset task started: $TASK_ARN"
          
          # Wait for task to be running
          echo "6. Waiting for container to start..."
          sleep 90

      - name: Test Direct Container Access
        run: |
          echo ""
          echo "🧪 TESTING DIRECT CONTAINER ACCESS"
          echo "=================================="
          
          CLUSTER_NAME=$(aws ecs list-clusters --query 'clusterArns[0]' --output text | xargs basename)
          
          # Get task details
          TASK_ARN=$(aws ecs list-tasks --cluster $CLUSTER_NAME --desired-status RUNNING --query 'taskArns[0]' --output text)
          
          if [ -n "$TASK_ARN" ] && [ "$TASK_ARN" != "None" ]; then
            TASK_STATUS=$(aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $TASK_ARN --query 'tasks[0].lastStatus' --output text)
            echo "Task Status: $TASK_STATUS"
            
            if [ "$TASK_STATUS" = "RUNNING" ]; then
              # Get public IP
              ENI_ID=$(aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
              PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query 'NetworkInterfaces[0].Association.PublicIp' --output text 2>/dev/null || echo "None")
              PRIVATE_IP=$(aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`privateIPv4Address`].value' --output text)
              
              echo "Private IP: $PRIVATE_IP"
              echo "Public IP: $PUBLIC_IP"
              
              # Test direct access
              if [ "$PUBLIC_IP" != "None" ] && [ -n "$PUBLIC_IP" ]; then
                echo ""
                echo "Testing direct container access:"
                echo "URL: http://$PUBLIC_IP"
                
                HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://$PUBLIC_IP" -m 10 || echo "TIMEOUT")
                echo "Direct Access Status: $HTTP_STATUS"
                
                if [ "$HTTP_STATUS" = "200" ]; then
                  echo "✅ CONTAINER WORKS DIRECTLY!"
                  echo "Problem is with Load Balancer setup, not container"
                  
                  # Now set up Load Balancer properly
                  echo ""
                  echo "7. Setting up fresh Load Balancer configuration..."
                  
                  VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text)
                  LB_ARN=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?starts_with(LoadBalancerName, `edumaster-alb`)].LoadBalancerArn' --output text)
                  
                  # Create new target group
                  TG_ARN=$(aws elbv2 create-target-group \
                    --name "edumaster-reset-$(date +%s | tail -c 5)" \
                    --protocol HTTP \
                    --port 80 \
                    --vpc-id $VPC_ID \
                    --target-type ip \
                    --health-check-enabled \
                    --health-check-path "/" \
                    --health-check-interval-seconds 30 \
                    --health-check-timeout-seconds 5 \
                    --healthy-threshold-count 2 \
                    --unhealthy-threshold-count 3 \
                    --query 'TargetGroups[0].TargetGroupArn' \
                    --output text)
                  
                  # Register target
                  aws elbv2 register-targets --target-group-arn $TG_ARN --targets Id=$PRIVATE_IP,Port=80
                  
                  # Create listener
                  aws elbv2 create-listener \
                    --load-balancer-arn $LB_ARN \
                    --protocol HTTP \
                    --port 80 \
                    --default-actions Type=forward,TargetGroupArn=$TG_ARN
                  
                  echo "✅ Fresh Load Balancer setup complete"
                  
                  # Wait for health checks
                  echo ""
                  echo "8. Waiting for health checks (2 minutes)..."
                  sleep 120
                  
                  # Final test
                  echo ""
                  echo "🎯 FINAL TEST"
                  LB_DNS="edumaster-alb-a94208ec-635552552.us-east-1.elb.amazonaws.com"
                  HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://$LB_DNS" -m 10 || echo "TIMEOUT")
                  
                  echo "Load Balancer Status: $HTTP_STATUS"
                  
                  if [ "$HTTP_STATUS" = "200" ]; then
                    echo ""
                    echo "🎉 SUCCESS! COMPLETE RESET WORKED!"
                    echo "🌐 Load Balancer URL: http://$LB_DNS"
                    echo "🌐 Direct Container URL: http://$PUBLIC_IP"
                    echo ""
                    echo "✅ Infrastructure is now working correctly!"
                  else
                    echo ""
                    echo "❌ Load Balancer still not working"
                    echo "But container works directly at: http://$PUBLIC_IP"
                    
                    # Show health status
                    echo ""
                    echo "Target health status:"
                    aws elbv2 describe-target-health --target-group-arn $TG_ARN --output table
                  fi
                  
                else
                  echo "❌ Even direct container access failed"
                  echo "This indicates a deeper container or network issue"
                fi
              else
                echo "❌ No public IP available for direct testing"
              fi
            else
              echo "❌ Container not running. Status: $TASK_STATUS"
            fi
          else
            echo "❌ No tasks found"
          fi