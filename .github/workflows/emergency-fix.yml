name: Emergency Fix - Back to Working State

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1

jobs:
  emergency-fix:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Stop Failed Container and Deploy Working One
        run: |
          echo "üöë Emergency fix: Reverting to working nginx container..."
          
          CLUSTER_NAME=$(aws ecs list-clusters --query 'clusterArns[0]' --output text | xargs basename)
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          
          # Stop all current tasks
          echo "Stopping failed containers..."
          TASK_ARNS=$(aws ecs list-tasks --cluster $CLUSTER_NAME --query 'taskArns' --output text)
          for TASK_ARN in $TASK_ARNS; do
            if [ -n "$TASK_ARN" ]; then
              aws ecs stop-task --cluster $CLUSTER_NAME --task $TASK_ARN
            fi
          done
          
          sleep 30
          
          # Deploy simple working nginx
          echo "Deploying reliable nginx container..."
          
          # Ensure log group exists
          aws logs create-log-group --log-group-name "/ecs/edumaster-emergency" || echo "Log group exists"
          
          # Create simple task definition
          aws ecs register-task-definition \
            --family edumaster-emergency \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu 256 \
            --memory 512 \
            --execution-role-arn "arn:aws:iam::$ACCOUNT_ID:role/ecsTaskExecutionRole" \
            --container-definitions '[{
              "name": "simple-nginx",
              "image": "nginx:alpine",
              "portMappings": [{"containerPort": 80, "protocol": "tcp"}],
              "essential": true,
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/edumaster-emergency",
                  "awslogs-region": "${{ env.AWS_REGION }}",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }]'
          
          # Get network details
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text)
          SUBNET_ID=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" "Name=map-public-ip-on-launch,Values=true" --query 'Subnets[0].SubnetId' --output text)
          
          # Use existing security group
          SG_ID=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" "Name=group-name,Values=edumaster-*" --query 'SecurityGroups[0].GroupId' --output text)
          
          # Run the task
          TASK_ARN=$(aws ecs run-task \
            --cluster $CLUSTER_NAME \
            --task-definition edumaster-emergency:1 \
            --launch-type FARGATE \
            --platform-version LATEST \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SG_ID],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          
          echo "Emergency container started: $TASK_ARN"
          
          # Wait for container to be running
          echo "Waiting for container to start..."
          sleep 60

      - name: Connect to Load Balancer
        run: |
          echo "üîó Connecting working container to Load Balancer..."
          
          CLUSTER_NAME=$(aws ecs list-clusters --query 'clusterArns[0]' --output text | xargs basename)
          
          # Get running task IP
          TASK_ARN=$(aws ecs list-tasks --cluster $CLUSTER_NAME --desired-status RUNNING --query 'taskArns[0]' --output text)
          
          if [ -n "$TASK_ARN" ] && [ "$TASK_ARN" != "None" ]; then
            TASK_STATUS=$(aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $TASK_ARN --query 'tasks[0].lastStatus' --output text)
            
            echo "Task Status: $TASK_STATUS"
            
            if [ "$TASK_STATUS" = "RUNNING" ]; then
              TASK_IP=$(aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`privateIPv4Address`].value' --output text)
              
              echo "Task IP: $TASK_IP"
              
              # Get the latest target group
              LATEST_TG_ARN=$(aws elbv2 describe-target-groups --query 'TargetGroups[?starts_with(TargetGroupName, `edumaster`)].{ARN:TargetGroupArn,Created:CreationTime}' --output json | jq -r 'sort_by(.Created) | reverse | .[0].ARN')
              
              # Clear old targets
              OLD_TARGETS=$(aws elbv2 describe-target-health --target-group-arn $LATEST_TG_ARN --query 'TargetHealthDescriptions[*].Target.Id' --output text 2>/dev/null || echo "")
              for OLD_TARGET in $OLD_TARGETS; do
                if [ -n "$OLD_TARGET" ] && [ "$OLD_TARGET" != "None" ]; then
                  aws elbv2 deregister-targets --target-group-arn $LATEST_TG_ARN --targets Id=$OLD_TARGET,Port=80 || echo "Failed to deregister $OLD_TARGET"
                fi
              done
              
              # Register new target
              aws elbv2 register-targets --target-group-arn $LATEST_TG_ARN --targets Id=$TASK_IP,Port=80
              
              echo "‚úÖ Emergency container connected to Load Balancer"
              
              # Wait for health checks
              echo "‚è≥ Waiting for health checks (90 seconds)..."
              sleep 90
              
              # Test the connection
              echo "üß™ Testing connection..."
              HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://edumaster-alb-a94208ec-635552552.us-east-1.elb.amazonaws.com" || echo "000")
              
              echo "Load Balancer HTTP Status: $HTTP_STATUS"
              
              if [ "$HTTP_STATUS" = "200" ]; then
                echo ""
                echo "üéâ SUCCESS! Back to working state!"
                echo "üåê URL: http://edumaster-alb-a94208ec-635552552.us-east-1.elb.amazonaws.com"
                echo ""
                echo "‚úÖ nginx welcome page should now be visible"
                echo "‚úÖ Infrastructure is stable and working"
              else
                echo "‚ùå Still having issues. HTTP Status: $HTTP_STATUS"
                
                # Show target health for debugging
                echo ""
                echo "Target Health Status:"
                aws elbv2 describe-target-health --target-group-arn $LATEST_TG_ARN --output table
              fi
            else
              echo "‚ùå Container not running. Status: $TASK_STATUS"
            fi
          else
            echo "‚ùå No running tasks found"
          fi

      - name: Provide Next Steps
        run: |
          echo ""
          echo "üîß EMERGENCY FIX COMPLETE"
          echo ""
          echo "Status: Back to stable nginx welcome page"
          echo "URL: http://edumaster-alb-a94208ec-635552552.us-east-1.elb.amazonaws.com"
          echo ""
          echo "üìã What happened:"
          echo "- The EduMaster showcase container had build/runtime issues"
          echo "- Reverted to simple, reliable nginx container"
          echo "- Load Balancer is now working properly again"
          echo ""
          echo "üéØ Next Options:"
          echo "1. Keep the simple nginx (stable, working)"
          echo "2. Create a simpler EduMaster version (less complex)"
          echo "3. Debug the showcase container issues"
          echo ""
          echo "Recommendation: Let's create a simpler EduMaster version that's more reliable!"